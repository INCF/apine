---
swagger: "2.0"
info:
  description: "This is the API for NEurostuff (Apine) server.  You can find \nout\
    \ more about Apine on Github\\:\n[https://github.com/INCF/apine](https://github.com/INCF/apine).\n"
  version: "0.0.1"
  title: "API for NEurostuff (Apine)"
  contact:
    name: "Apine Contributors"
    url: "https://github.com/INCF/Apine/issues/"
  license:
    name: "MIT License"
    url: "https://opensource.org/licenses/MIT"
host: "virtserver.swaggerhub.com"
basePath: "/gkiar/apine-dev/0.0.1"
tags:
- name: "dataset"
  description: "Dataset-specific queries, such as modalities, tasks, demographics"
- name: "entry"
  description: "Observation-specific queries, such as participant, session, keys"
schemes:
- "https"
- "http"
paths:
  /datasets:
    get:
      tags:
      - "dataset"
      summary: "List all accessable datasets"
      description: "Will return information about the available datasets"
      operationId: "list_datasets"
      produces:
      - "application/json"
      - "application/xml"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Datasets"
        400:
          description: "No datasets found"
      security:
      - apine_auth:
        - "read:datasets"
      x-swagger-router-controller: "swagger_server.controllers.dataset_controller"
  /dataset:
    get:
      tags:
      - "dataset"
      summary: "Find a dataset"
      description: "Will return information about the specified dataset"
      operationId: "get_dataset"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "datasetID"
        in: "query"
        description: "Identifier for the dataset(s) of interest"
        required: true
        type: "array"
        items:
          type: "string"
          default: "available"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Dataset"
        400:
          description: "Invalid ID"
      security:
      - apine_auth:
        - "read:datasets"
      x-swagger-router-controller: "swagger_server.controllers.dataset_controller"
  /pet/findByTags:
    get:
      tags:
      - "pet"
      summary: "Finds Pets by tags"
      description: "Muliple tags can be provided with comma separated strings. Use\\\
        \ \\ tag1, tag2, tag3 for testing."
      operationId: "find_pets_by_tags"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        400:
          description: "Invalid tag value"
      security:
      - apine_auth:
        - "read:datasets"
      x-swagger-router-controller: "swagger_server.controllers.pet_controller"
  /pet/{petId}:
    get:
      tags:
      - "pet"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "get_pet_by_id"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - api_key: []
      x-swagger-router-controller: "swagger_server.controllers.pet_controller"
  /store/inventory:
    get:
      tags:
      - "store"
      summary: "Returns pet inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "get_inventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
      x-swagger-router-controller: "swagger_server.controllers.store_controller"
  /store/order/{orderId}:
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.\\\
        \ \\ Other values will generated exceptions"
      operationId: "get_order_by_id"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
      x-swagger-router-controller: "swagger_server.controllers.store_controller"
securityDefinitions:
  apine_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      read:datasets: "read your datasets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    example:
      petId: 6
      quantity: 1
      id: 0
      shipDate: "2000-01-23T04:56:07.000+00:00"
      complete: false
      status: "placed"
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    example:
      name: "name"
      id: 6
    xml:
      name: "Category"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    example:
      name: "name"
      id: 1
    xml:
      name: "Tag"
  Datasets:
    type: "array"
    items:
      $ref: "#/definitions/Dataset"
  Dataset:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "ds114"
      participantList:
        type: "array"
        example:
        - "01"
        - "02"
        - "03"
        - "04"
        - "05"
        xml:
          name: "participants"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "dataset access status"
        enum:
        - "public"
        - "restriced"
        - "private"
    example:
      participantList:
      - "01"
      - "02"
      - "03"
      - "04"
      - "05"
      name: "ds114"
      id: 0
      category:
        name: "name"
        id: 6
      tags:
      - name: "name"
        id: 1
      - name: "name"
        id: 1
      status: "public"
    xml:
      name: "Dataset"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    example:
      photoUrls:
      - "photoUrls"
      - "photoUrls"
      name: "doggie"
      id: 0
      category:
        name: "name"
        id: 6
      tags:
      - name: "name"
        id: 1
      - name: "name"
        id: 1
      status: "available"
    xml:
      name: "Pet"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
